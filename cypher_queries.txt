// 1. Initialize nodes and indices (Must be entered individually)
CREATE CONSTRAINT ON (p:Publication) ASSERT p.pubID IS UNIQUE;
CREATE CONSTRAINT ON (a:Author) ASSERT a.authorID IS UNIQUE;
CREATE CONSTRAINT ON (f:FoS) ASSERT f.fosName IS UNIQUE;
CREATE CONSTRAINT ON (v:Venue) ASSERT v.venueName IS UNIQUE;
CREATE CONSTRAINT ON (pl:Publisher) ASSERT pl.publisher IS UNIQUE;
CREATE INDEX ON :Publication(title)

// 2. Load Publications
USING PERIODIC COMMIT 100000
LOAD CSV WITH HEADERS FROM "file:///DBLP_RD.csv" AS dblp
MERGE (p:Publication {pubID: dblp.id})
SET p.title = dblp.title,
p.year = dblp.year,
p.publisher = dblp.publisher,
p.doi = dblp.doi,
p.authorNames = split(dblp.authorsName, ","),
p.authorIDs = split(dblp.authorsID, ","),
p.venueName = dblp.venueName,
p.venueID = dblp.venueID,
p.fosNames = split(dblp.fosName, ","),
p.fosWeights = split(dblp.fosWeight, ","),
p.references = (split(dblp.references, ",")),
p.n_citation = dblp.n_citation

// 3. Create relationship between publications if one references the other
USING PERIODIC COMMIT 100000
LOAD CSV WITH HEADERS FROM "file:///DBLP_RD.csv" AS dblp
WITH dblp
WHERE NOT dblp.references IS NULL
WITH split(dblp.references, ",") AS refs, dblp.id AS publicationID
UNWIND refs AS ref
MATCH (p1:Publication {pubID: publicationID}), (p2:Publication {pubID: ref})
CREATE (p1)-[:REFERENCES]->(p2)

// 4. Load Authors
USING PERIODIC COMMIT 100000
LOAD CSV WITH HEADERS FROM "file:///DBLP_RD.csv" AS dblp
WITH dblp
WHERE NOT dblp.authorsID IS NULL
WITH split(dblp.authorsID, ",") AS id, split(dblp.authorsName, ",") AS name, RANGE(0, SIZE(split(dblp.authorsID, ","))-1) as i
FOREACH (x IN i | 
	MERGE (a:Author {authorID: id[x]})
	SET a.authorName = name[x]
)

// 5. Create relationship between Author and Publication
USING PERIODIC COMMIT 100000
LOAD CSV WITH HEADERS FROM "file:///DBLP_RD.csv" AS dblp
WITH dblp
WHERE NOT dblp.authorsID IS NULL
WITH split(dblp.authorsID, ",") AS authIDs, dblp.id AS publicationID
UNWIND authIDs AS authID
MATCH (p:Publication {pubID: publicationID}), (a:Author {authorID: authID})
CREATE (p)-[:AUTHORED_BY]->(a)

// 6. Create relationship between Co-Authors
USING PERIODIC COMMIT 100000
LOAD CSV WITH HEADERS FROM "file:///DBLP_RD.csv" AS dblp
WITH dblp
WHERE NOT dblp.authorsID IS NULL
WITH split(dblp.authorsID, ",") AS id
MATCH (a1:Author), (a2:Author)
WHERE a1.authorID = id[0] AND a2.authorID IN tail(id) AND NOT EXISTS((a1)-[:CO_AUTHOR]-(a2))
CREATE (a1)-[:CO_AUTHOR]->(a2)

// 7. Load FOS
USING PERIODIC COMMIT 100000
LOAD CSV WITH HEADERS FROM "file:///DBLP_RD.csv" AS dblp
WITH split(dblp.fosName, ",") AS fos
FOREACH (field IN fos | 
	MERGE (f:FoS {fosName: field})
)

// 8. Create relationship between Publication and FOS
USING PERIODIC COMMIT 100000
LOAD CSV WITH HEADERS FROM "file:///DBLP_RD.csv" AS dblp WITH split(dblp.fosName, ",") AS fosNames, dblp.id AS publicationID
UNWIND fosNames AS fosName
MATCH (p:Publication {pubID: publicationID}), (f:FoS {fosName: fosName})
WHERE toString(f.fosName) IN p.fosNames
CREATE (p)-[:IN_FIELD]->(f)

// 9. Load Venue
USING PERIODIC COMMIT 100000
LOAD CSV WITH HEADERS FROM "file:///DBLP_RD.csv" AS dblp
WITH dblp
WHERE NOT dblp.venueName IS NULL
MERGE(v:Venue {venueName: dblp.venueName})
ON CREATE SET v.venueID = dblp.venueID

// 10. Create relationship between Publication and Venue
USING PERIODIC COMMIT 100000
LOAD CSV WITH HEADERS FROM "file:///DBLP_RD.csv" AS dblp
WITH dblp
WHERE NOT dblp.venueName IS NULL
MATCH (p:Publication {pubID: dblp.id}), (v:Venue {venueName: dblp.venueName})
CREATE (p)-[:PUBLISHED_AT]->(v)

// 11. Load Publisher
USING PERIODIC COMMIT 100000
LOAD CSV WITH HEADERS FROM "file:///DBLP_RD.csv" AS dblp
WITH dblp
WHERE NOT dblp.publisher IS NULL
MERGE(pl:Publisher {publisher: dblp.publisher})

// 12. Create Relationship between Publication and Publisher
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:///DBLP_RD.csv" AS dblp
WITH dblp
WHERE NOT dblp.publisher IS NULL
MATCH (p:Publication {pubID: dblp.id}), (pl:Publisher {publisher: dblp.publisher})
CREATE (p)-[:PUBLISHED_BY]->(pl)